\input texinfo
@c -*- texinfo -*-

@c %**start of header
@setfilename chil.info
@documentencoding UTF-8
@settitle Chil Reference Manual
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2023 Raven Hallsby@*

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@titlepage
@title Chil Reference Manual
@subtitle Constructing Hardware in Lisp Language and Simulator
@author Raven Hallsby

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top Chil

This document describes Chil version @value{VERSION}, a hardware
construction language and simulator.  Chil is inspired by
@uref{https://www.chisel-lang.org/, Chisel} and a variety of hardware
simulators.

@menu
* Introduction::                What is Chil?
* Hardware Language::           Chil, the language.
* Contributing::                You can help too!
@end menu

@node Introduction
@chapter Introduction

@cindex purpose
Chil has multiple goals with many lofty goals.
Some or none of these may ever come to pass.

@enumerate
@item
Create and define an embedded domain-specific language@tie{}(EDSL), that
allows for expressing hardware in a reusable and composable way.
@item
Writing out a Chil design to another Hardware Description
Language@tie{}(HDL), whether it be Verilog, VHDL, FIRRTL, CIRCT, or any
other.
@item
When lowering a design from Chil's syntax to another language, use a
nanopass framework for optimizations, to make understanding a single
optimization easier and make adding additional optimization passes
simpler.
@item
Create a digital logic simulator that supports snapshotting, interactive
debugging, and time travel.
@item
Include a verification system to formally verify a design in the same
language as the design is written in.
@item
Synthesize to hardware, if possible.
@end enumerate

@node Hardware Language
@chapter Hardware Language

@uref{https://www.chisel-lang.org/, Chisel} introduced the world to
using an embedded domain-specific language@tie{}(EDSL) for hardware
design.  In many ways, this brought hardware design languages into the
21st Century.  Chisel allows for designs to:
@itemize
@item
Inherit from multiple sub-component definitions, through direct
object-oriented inheritance or through trait/typeclass/component
composition.
@item
Use functional programming ideas to improve the replication of portions
of the design.  Namely, Chisel uses a strong and strict type system,
makes heavy use of immutability, and frequently uses higher-order
functions to express repeatedly complex operations.
@end itemize

Chisel is built out of and on top of the
@uref{https://www.scala-lang.org/, Scala} software programming language.
While Scala is a fine language, it has some issues as well.  Most
notably (in the author's opinion) is the difficulty in creating new
Chisel components that require altering Chisel's internal behaviors.  As
an example, the author needed to have a directioned@footnote{This means
the input to one module connects to an output from another, as you would
expect. Chisel's default connection operator simply connects the first
signal in one module to the first signal in the other module, and so
on.} connection primitive for a Chisel design.  Chisel had that feature,
but only in the experimental package at the time.

@node Contributing
@chapter Contributing
@cindex documentation

Chil is documented using the Texinfo system.

@menu
* Submitting Patches::          Sharing your work & improvements.
* Writing Documentation::       Improving & Writing documentation.
@end menu

@node Submitting Patches
@section Submitting Patches
When writing documentation, please use gender-neutral wording when
referring to people, such as
@uref{https://en.wikipedia.org/wiki/Singular_they, singular
``they''@comma{} ``their''@comma{} ``them''}, and so forth.

@node Writing Documentation
@section Writing Documentation

To render documentation, you must first make sure that you ran both
@command{./bootstrap} and @command{./configure} in your source tree.
After that you can run one of the following commands:

@itemize
@item @samp{make info} to compile the Info manual.
      You can check it with @command{info doc/chil.info}.
@item @samp{make doc/chil.info} to compile the Info manual.
      You can check it with @command{info doc/chil.info}.
@item @samp{make html} to compile the HTML version.
      You can point your browser to the relevant file in the
      @file{doc/chil.html} directory.
@item @samp{make doc/chil.html} to compile the HTML version.
      You can point your browser to the relevant file in the
      @file{doc/chil.html} directory.
@end itemize

@bye

@c Local Variables:
@c ispell-local-dictionary: "american";
@c End:
