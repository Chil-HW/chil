#+TITLE: TODO

* Lessons from Nyxt
  * [[https://nyxt.atlas.engineer/article/continuous-testing-and-packaging.org][Nyxt continuous testing/packaging]]
  * [[https://nyxt.atlas.engineer/article/lisp-documentation-patterns.org][Good Common Lisp Documentation Patterns]]
    - Dynamic/special/global variables with ~*earmuffs*~.
    - Constants with ~+plus-signs+~.
    - If internal functions and variables *must* be exported, wrap them with ~%percent-signs%~.
    - Predicates with -p suffix.
    - README layout:
      1. Title and description - General information about the project. Goal and features.
      2. Getting started - How to install and load.
      3. Examples - Short code snippets for the most common use-cases.
      4. How it works - Explanations of the underlying model and implementation details.
    - Function/method doc-strings:
      #+begin_src common-lisp
"First line as a single sentence less than 80 chars long—for readability.
Return VALUE or
- VALUE-1
- VALUE-2
- etc.

ARGUMENT-1 represents ...
BOOLEAN-ARGUMENT mandates whether ...

See also `another-symbol'."
      #+end_src
    - Generics should come from a defgeneric form for increased inspectability and reliability of access.
      Methods can be undocumented, because they are generally just implementations for a documented generic.
      Method documentation is where exceptional implementation details end up.
    - Give *very* clear documentation about macros.
      Include many examples for all common cases in the documentation!

* Look at Others
These are some other HDL langauges that I may want to look at.
  * [[https://github.com/Jacajack/hdl][HIRL HDL]]
  * [[https://github.com/rems-project/sail/][SAIL2]] - Single source of truth for ISA.
    From formal & functional specification, can be:
    - Mechanically checked
    - Generate human-readable documentation
    - Generate boilerplate for simulators & compilers & HDLs

* Interesting Common Lisp Libraries
Many of these libraries are [[https://github.com/CodyReichert/awesome-cl][listed here]].
  * [[https://github.com/dnaeon/clingon][Clingon]] - Command Line argument parser
  * [[https://github.com/vindarel/cl-readline][cl-readline]] - Add readline functions to REPL
  * [[https://common-lisp.net/project/linedit][Linedit]] - Readline-style library
  * [[https://common-lisp.net/project/bordeaux-threads/][BordeauxThreads]] - Portable threading
  * [[https://github.com/mdbergmann/cl-gserver][Sento]] - Message passing actors, similar to Erlang
  * [[https://www.cs.utexas.edu/users/moore/acl2/][ACL2]] - Logic and programming language for modeling & proving
  * [[https://github.com/pcostanza/closer-mop][closer-mop]] - Compatibility layer for using CLOS's MOP
  * [[http://marijnhaverbeke.nl/postmodern/][postmodern]] - Interact with PostgreSQL

* Compilation Targets
A variety of compilation targets should be available, either for debugging or performance.
To make code "steppable" you must have set ~debug~ to be greater than ~speed~, ~space~, and ~compilation-speed~.
This can be done with the ~declaim~ function.

* Testing
  1. Property-based testing of pure functions.
     For example, ~chil:log2up~ should be property tested.
     This way I only have to write the properties required, and not any actual implementation.
     Possible candidates:
     * [[https://github.com/DalekBaldwin/check-it][check-it]] (Last update 2015-06-05)
       Does not play well with lisp-unit2 because ~lisp-unit2:assert-error~ does not return a value when an error is thrown.
       #+begin_src lisp
;; This should be a successful test.
(lisp-unit2:assert-error 'simple-error (chil/utils:log2up -1))
; No values

;; This should be a failing assertion/test.
(lisp-unit2:assert-error 'simple-error (- 2 1))
1 (1 bit, #x1, #o1, #b1)
       #+end_src
       However, check-it expects the lambda predicate to return true or false depending on the result of the value.
     * [[https://github.com/mcandre/cl-quickcheck][cl-quickcheck]] (Last update 2020-05-08) (Seems abandoned.)
     * Write my own in the style of [[https://ngyro.com/software/guile-quickcheck.html][guile-quickcheck]] or [[https://docs.racket-lang.org/quickcheck/index.html][Racket's Quickcheck]].
       https://stevana.github.io/the_sad_state_of_property-based_testing_libraries.html
  2. Automated generation of test programs for modules requiring simulation.
     Interesting works in software:
     * [[https://dl.acm.org/doi/10.1145/3428264][YARPGen]]
  3. Generated output (Verilog, VHDL) should be checked against simulators for linting.
     For Verilog, use Verilator & Icarus.
     For VHDL, use GHDL.

** Formal Methods
Hardware is extensively validated and verified with formal methods.
Chil should support writing a formal specification of the hardware, which means we need a way to express these kinds of concepts.
There are several kinds of formal methods that we should investigate and try to support:
  1. Model & Property Checking (Lightweight formal methods)
     We can take the core of our randomized property testing from [[https://ngyro.com/software/guile-quickcheck.html][guile-quickcheck]]?
     The [[https://pkgs.racket-lang.org/package/forge][forge language]] built on top of Racket might also be a good resource to look at.
  2. Formal Specification & Theorem Proving (Heavyweight formal methods)
     We might be able to piggy-back of [[https://www.cs.utexas.edu/users/moore/acl2/][ACL2]] for this.

I am not sure we want to support this in Chil directly, because this might be more generally useful.
It might make more sense for this to be a separate project that Chil then relies on.
It remains to be seen which is better, but initial development will start here I think.
If it seems better to factor these formal methods tools out to a separate repository, then we will tackle that problem later.

Many of the concepts discussed in this section come from [[https://jakob.space/blog/what-ive-learned-about-formal-methods.html][Jakob Kreuze]]'s blog post about their expeirence with formal methods in courses.

* Higher-level Hardware
  1. Create higher-level versions of ~chil:module~ that is less painful to use, but can be converted into low-level Verilog-like format currently being used.
     Should support an implicit reset & clock, which can be overridden with a ~(with-reset/clock ...)~ macro(?).
     * Higher-level version should *NOT* have Verilog-specific information included in its definition.
       This includes things like ~timescale~.
       ~timescale~ should be handled at the Verilog level, but needs to be passed through as metadata attached to the higher-level module.
  2. This higher-level hardware should support things like mixins.
     Chisel has the ability to create a new module that ~extend~-s another, so that the new one inherits that hardware.
     It also has the ability to use composition, so you can say a signal "bundle" *must* and *will* contain these other signals, which have certain methods already defined for them.
     * See Chapter 2.1 (Hooks) of Common Lisp Condition System for underying idea on how to implement mixins similar to Chisel.
       Should use catch/signal/error/handler-bind for real thing though. See Chapter 2.2 for that.
     * Might want to use restarts instead?
     * Reference the [[https://lispcookbook.github.io/cl-cookbook][Common Lisp Cookbook]]
     * Investigate how [[https://github.com/Shirakumo/kandria][Kandria]] did mixins for their simulator.
       https://github.com/Shinmera/talks/tree/master
  3. One-way enum for FSM
     Specialization of an enum that only allows you to traverse in one direction.
     ~(next oneway-enum signal)~ moves you to next state when signal goes high.
     Special-case this because complicated FSMs typically have cycles in their control flow (looping).
  4. The equivalent to Chisel's ~Flipped~ constructor could be a macro that just switches all ~(inputs ...)~ to ~(outputs ...)~.
     ~(defmacro ... `(,module (inputs ,(module-outputs)) (outputs ,(module-inputs)) rest is same?)~

* Building/Elaborating
For any realistic Chil project, a build system will be needed to automate the work of taking a Chil description and lowering it to another format.
Look through [[https://www.microsoft.com/en-us/research/uploads/prod/2018/03/build-systems.pdf][Build Systems à la Carte]] for more information about this topic.

Implementing this could be done just by piggy-backing off of Common Lisp's already-present asdf.
Then for larger scale automation, some utilities may be provided.

[[https://github.com/dalance/veryl][Veryl]] is very similar to Verilog, with minor conveniences added to it.
Its real draw is that it has a set of integrated tools that help manage your project, with commands similar to Rust's ~cargo~ tool.

There should be a define-able style guide which can be enforced by a linter.
An example of a [[https://github.com/lowRISC/style-guides/blob/master/VerilogCodingStyle.md][Verilog Style Guide]].

Something that SBT does that I think is really nice is that you can add a ~~~ to any ~sbt~ command, and it will "watch" the dependencies.
This means that if you update a dependency for the command, the command is automatically re-run.
For example, after saving edits to a file, the unit tests for that file run again *automatically*, with the necessary builds done in between.

** Notes after reading Build Systems à la Carte
We want a suspending scheduler for the build system, where each thread/process building the project can be paused until its inputs are ready.
But given Common Lisp's restart system, a restarting scheduler could be far more feasible.
Another problem for suspending scheduler is that Common Lisp does not have good support for continuation-passing style?

** Comparison to Chisel
Chisel uses the Scala Build System (SBT) to define and declare projects, and uses Java's default file hierarchy to find files.
But SBT does not work for projects that need to leave the Scala world?
Hence, larger projects like Chipyard need a combination of scripts, Makefiles, and Scala-generated Makefiles to make everything happen.

Chisel, Chipyard, Rocket, etc. all moved to using [[https://mill-build.com/mill/Intro_to_Mill.html][Mill]] instead of SBT.

* Usage
If I intend to support multiple input formats and output formats, there will need to be a series of steps to define actions to take to produce an output.
This may involve running the Chil compiler, but it might also involve running other tools (like a script to convert a JSON description of memory into a dat format).
If I also want to have a "workflow" kind of language so that I can provide a design and the desired end target, then I would need this too.
Effectively, this would become the unified way to work with anything in my Chil language.

  * [[https://docs.calyxir.org/running-calyx/fud2/index.html][fud2]] - A Compiler driver for orchestrating the Calyx ecosystem.
    It handles building a design (including lowering from Dahlia, their HLS language) and turning it into SystemVerilog, which is then merged with their SystemVerilog standard library.
    It can interpret the Calyx using their interpreter, Cider.
    It can also take the final SystemVerilog and run it through Verilator, Icarus, or even FPGA workflows for synthesis.
    Currently (2024-08-16), fud2 uses a breadth-first search to find a path in the graph of operations from the input to the requested output.
    However, they are also investigating other methods, like using E-Graphs (Equivalence Graphs) through egglog, or constraint programming through Datalog.

* Optimization
Within Chil, I would like to have an optimization framework for the higher-level language.
I am not sure how much optimization is possible in the long-run.
But for the small actively-working capacity of my mind, the [[https://github.com/nanopass][Nanopass Framework]] makes the most sense to me.

  1. I might have to implement the [[https://github.com/nanopass][Nanopass Framework]] in ANSI Common Lisp...
     * If I did that, I might be able to get that upstreamed?

** Pass Ideas
Nanopass uses /very/ small passes that do relatively little work.
They rewrite, modify, or analyze a very small subset of an AST to do something.
One example is to convert instances of ~let*~ in Scheme to a ladder of ~let~ and ~lambda~.

Some ideas for passes that I could write are:
  * CheckWidths: FIRRTL has a pass to check if dynamic shifting uses a dynamic shift amount that has a bit-width $> 20$.
    This is the ~firrtl.passes.CheckWidths~ pass, particularly the ~$DshlTooBig~ top-level function.

* Outputs
Generate other low-level HDLs.
  1. FIRRTL?
  2. CIRCT?
  3. VHDL
  4. SystemVerilog

* Simulator
Chil should include a simulator alongside it.
Requirements:
  * Should be multi-threaded, to improve execution speed, if possible.
  * If a "core" assertion in the simulation testbench fails, then a Lisp core image should be saved (~sb-ext:save-lisp-and-die~).
  * This core image should allow for "rewinding" the world to see the sequence of events that caused an assertion violation.

Methods to achieve requirements:
  1. Simulator should use transactional memory?
     * [[https://stmx.org/][SMTX Common Lisp library]] makes it easy to use transactional memory in CL.
     * This may also make multithreading the simulator easier?
     * If the simulator's core image dump (~sb-ext:save-lisp-and-die~) includes the log of memory transactions internally, rewinding the image is simple, without dependencies.
     * [[https://spritely.institute/][Goblins]] implemented this with transactional heaps.
       [[https://spritely.institute/news/introducing-a-distributed-debugger-for-goblins-with-time-travel.html][Goblins Distributed Debugger with Time Travel]] is almost exactly what I would like.
     * Could use [[https://lfe.io/][Lisp Flavoured Erlang]] too, and have Erlang actors handle that.
       I don't know if there is a way for a "core dump" to be made though, as LFE compiles to BEAM bytecode and runs on top of there.
     * Transactional Heaps?
       - [[https://apps.dtic.mil/sti/pdfs/ADA306269.pdf][Safe and Efficient Persistent Heaps]]
       - [[https://dl.acm.org/doi/10.1145/1961295.1950380][NV-Heaps: Making Persistent Objects Fast and Safe]]
  2. Simulator must record the state changes in the circuit to a DB for rewind?
     Does the transactional memory allow that too?
     If the transaction log of memory allows for recording to disk, then replay should be somewhat trivial.
     * Jason recommended RRDTool as a time-series database.
       If a database is needed, that might make more sense.
  3. [[https://dspace.mit.edu/bitstream/handle/1721.1/44215/MIT-CSAIL-TR-2009-002.pdf?sequence=1&isAllowed=y][Propagators]]?

* Verification
  1. [[https://dl.acm.org/doi/10.1145/263699.263712][Proof-Carrying Code]]
  2. Compare/contrast with [[https://symbiyosys.readthedocs.io/en/latest/][SymbiYosis]], Yosys's front-end to formal HW verification flows

* Examples
  1. Simple counter
  2. ALU
  3. Single-Error Correct, Double-Error Detect ECC Unit
  4. N-point FFT
  5. Cryptographic cores/accelerators
     1. AES-256
     2. SHA-256
  6. IEEE 754 compliant Floaing-point unit (Similar to Berkeley's hardfloat)
     1. Addition
     2. Subtraction
     3. Multiplication
     4. Division
     5. Pipelined
  7. Communications protocol (AXII, AHB-to-APB bridge)
  8. RISC-V core (Should support RISC-V GC, to boot Linux)
     Getting many of these built will make my stuff equivalent to [[https://github.com/ucb-bar/riscv-sodor][Berkeley's RISC-V SODOR]].
     1. Hardware support for single-, double-, and quad-precision floating point.
        See [[https://github.com/ucb-bar/berkeley-hardfloat][Berkeley's HardFloat]].
     2. Single-cycle
     3. Multi-cycle
     4. Pipelined (single issue)
        1. [[https://mrisc32.bitsnbites.eu/][mrisc32]]
     5. Multi-issue in-order pipelined
     6. Single-issue out-of-order
     7. Multi-issue out-of-order
  9. [[https://github.com/adam-maj/tiny-gpu][tiny-gpu]]: A minimal GPU that executes a single kernel at a time with many threads per core.
     This architecture also includes a small amount of possible configuration too.
  10. [[https://github.com/turbo9team/turbo9][turbo9]]: Pipelined Motorola 6809 design
  11. [[https://gitlab.com/zephray/caster][Caster]]: Electrophoretics Display (eInk) Controller.
      Used by [[https://github.com/Modos-Labs/Glider][Glider]].
  12. [[https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/][CHERI]] in Hardware
      This has already been done with ARM, MIPS, and recently RISC-V.
      But I want to implement on this.
  13. Custom architecture
